#!/bin/bash
#
#   SLDM: Single Line Display Manager
#
#   Copyright (C) 2012, RaphaÃ«l Proust <raphlalou@gmail.com>
#
#
#   CDM: The Console Display Manager
#
#   Copyright (C) 2009-2011, Daniel J Griffiths <ghost1227@archlinux.us>
#   Thanks to:
#       Andrwe..........beta-testing and submitting the fix for the all
#                       important X incrementation function
#       brisbin33.......code cleanup
#       tigrmesh........finding a critical issue with the gnome-session
#                       handler
#       Profjim.........several incredibly useful patches
#       lambchops468....consolekit and hibernation patches
#
#       This program is free software; you can redistribute it and/or modify
#       it under the terms of the GNU General Public License as published by
#       the Free Software Foundation; either version 2 of the License, or
#       (at your option) any later version.
#
#       This program is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#       GNU General Public License for more details.
#
#       You should have received a copy of the GNU General Public License
#       along with this program; if not, write to the Free Software
#       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#       MA 02110-1301, USA.

ver="0.1"
# Ignore SIGINT (^C) and SIGTSTP (^Z)
trap "" 2 20
userclientrc=$HOME/.xinitrc
sysclientrc=/etc/X11/xinit/xinitrc

# Source sldm configuration
if [[ -f /etc/sldmrc ]]
then
  source /etc/sldmrc
  count=0
  while [[ ${count} -lt ${#userconfig[@]} ]]
  do
    if [[ "${USER}" == "${userconfig[${count}]}" ]]
    then
      ${userconfig[${count}]}
    fi
    let count=count+1
  done
else
  echo -e "ERROR: A valid sldm configuration was not found!"
  echo -e "Logging out."
  sleep 2
  exit 1
fi

# Based on FreeBSD's /etc/rc.subr
#
# checkyesno var
#    Test $1 variable, and warn if not set to YES or NO.
#    Return 0 if it's "yes" (et al), nonzero otherwise.
#    to make default yes, do "checkyesno var yes"

checkyesno() {
  local value=${!1}
  # debug "checkyesno: $1 is set to $value."
  if [[ -n $2 ]]
  then
    value=${value:-$2}
  else
    value=${value:-no}
  fi
  case $value in
    ([Yy][Ee][Ss]|[Tt][Rr][Uu][Ee]|[Oo][Nn]|1) return 0 ;;
    ([Nn][Oo]|[Ff][Aa][Ll][Ss][Ee]|[Oo][Ff][Ff]|0) return 1 ;;
    (*)
      echo "\$${1} is not set properly." >&2
      exit 1
    ;;
  esac
}

# If X is already running and locktty=yes, activate it,
# otherwise, increment.
if $(checkyesno locktty)
then # Verify display exists
  if [[ -n "${display//[0-9]/}" ]]
  then
    display=0
  fi
  # Activate existing X session
  if xdpyinfo -display :${display}.0 &> /dev/null
  then
    let tty=display+xtty
    chvt ${tty}
    exit 0
  fi
else # Get the first empty display
  display=0
  while [[ ${display} -lt 7 ]]
  do
    if dpyinfo=$(xdpyinfo -display :${display}.0 2>&1 1>/dev/null)
    then
      let display=display+1
    elif [[ $dpyinfo = No\ protocol\ specified* ]]
    then
      # Display is in use by another user
      let display=display+1
    elif [[ $dpyinfo = Invalid\ MIT* ]]
    then
      let display=display+1
    else
      break
    fi
  done
fi

mainmenu() {
  # Generate main menu
  count=0
  menu=$(
    while [[ ${count} -lt ${#wmlist[@]} ]]
    do
      printf "%s\n" "${wmlist[${count}]}"
      let count=count+1
    done
  )

  if $(checkyesno allowconsole)
  then
    menu=$(printf "%s\n%s\n" "${menu}" "console")
  fi

  if $(checkyesno allowshutdown)
  then
    menu=$(printf "%s\n%s\n%s\n" "${menu}" "shutdown" "reboot")
  fi

  # Display selection menu
  wm=$(printf %s "$menu" |slmenu)
  if [[ $? != 0 ]]
  then
    exit 0
  fi

  # Set wm_bin
  case ${wm} in
    (console) exit 2 ;;
    (shutdown) ${shutdowncommand} ;;
    (reboot) ${rebootcommand} ;;
    (*)
      wm_bin="${wm}"
      xstart
      ;;
  esac
}

xstart() {
  # Start X
  if $(checkyesno usexinit)
  then
    if [[ -f $userclientrc ]]
    then
      wm_bin="$userclientrc $wm_bin"
    elif [[ -f $sysclientrc ]]
    then
      wm_bin="$sysclientrc $wm_bin"
    fi
  else
    wm_bin="/usr/share/sldm/xinitrc $wm_bin"
  fi

  serverargs=":${display} ${serverargs} vt$((xtty+display))"

  if $(checkyesno loginshell)
  then
    setsid bash --login -c "startx $wm_bin -- ${serverargs}" &> /dev/null &
  else
    setsid startx $wm_bin -- ${serverargs} &> /dev/null &
  fi

  if [[ -n $clockpid ]]
  then
    #if wait returns with a value >128, it was interrupted by the trap, so registration was sucessful.
    if wait $clockpid
    then
      echo -e "Timed out, giving up.\nCheck to see if you are wrapping your session with ck-launch-session or increase the timeout. ${reset}"
      kill $dbuspid
      exit 1
    else
      kill $dbuspid $clockpid
      exit 0
    fi
  fi

  exit 0
}
mainmenu
